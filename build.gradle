plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
}

repositories {
  mavenCentral()
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

compileTestJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

dependencies {
  compile commonsLang3
  compile(googleJavaFormat) {
    // Exclude transitive dependencies that don't affect the formatter
    exclude module: 'jcommander'
    exclude module: 'org.eclipse.equinox.app'
    exclude module: 'org.eclipse.core.filesystem'
    exclude module: 'org.eclipse.text'
    exclude module: 'org.eclipse.equinox.registry'
  }
  compile guava
  compile jsr305
  compileOnly autoService
  compileOnly sorcerer

  testCompile guavaTestlib
  testCompile gwtUser
  testCompile hamcrest
  testCompile jackson('annotations')
  testCompile jackson('core')
  testCompile jackson('databind')
  testCompile jackson('datatype-guava')
  testCompile jackson('datatype-jdk8')
  testCompile javassist
  testCompile junit
  testCompile mockito
  testCompile truth
}

String jackson(String pkg) {
  String namespace
  if (pkg.startsWith('datatype-')) {
    namespace = 'datatype'
  } else {
    namespace = 'core'
  }
  return String.format('com.fasterxml.jackson.%s:jackson-%s:%s',
      namespace, pkg, jacksonVersion)
}

//// Shadow JAR //////////////////////////////////////////////////
jar {
  classifier = 'only'
}

shadowJar {
  classifier = null

  ['com.google', 'org.apache', 'org.eclipse', 'org.osgi'].each {
    relocate it, "org.inferred.freebuilder.shaded.$it"
  }

  // Exclude common META-INF detritus
  exclude 'META-INF/*.txt'
  exclude 'META-INF/maven/**'

  // Exclude Eclipse (via google-java-format) detritus
  exclude 'META-INF/eclipse.inf'
  exclude 'META-INF/services/org.osgi.*'
  exclude '.api_description'
  exclude '.options'
  exclude 'about.html'
  exclude 'about_files/*.txt'
  exclude 'ant_tasks/*'
  exclude 'plugin.xml'
  exclude 'jdtCompilerAdapter.jar'
  exclude '*.profile'
  exclude '*.properties'
  exclude '*.list'

  // Exclude all of jsr305 except Nullable, Nonnull and meta.When
  exclude 'javax/annotation/C*'
  exclude 'javax/annotation/D*'
  exclude 'javax/annotation/M*'
  exclude 'javax/annotation/Nonnegative*'
  exclude 'javax/annotation/O*'
  exclude 'javax/annotation/P*'
  exclude 'javax/annotation/R*'
  exclude 'javax/annotation/S*'
  exclude 'javax/annotation/T*'
  exclude 'javax/annotation/U*'
  exclude 'javax/annotation/W*'
  exclude 'javax/annotation/concurrent/*'
  exclude 'javax/annotation/meta/E*'
  exclude 'javax/annotation/meta/T*'
}

//// Vanilla integration tests ///////////////////////////////////
configurations {
  vanillaCompile
  vanillaTestCompile.extendsFrom vanillaCompile
}
dependencies {
  vanillaCompile guava
  vanillaCompile gwtUser
  vanillaTestCompile junit
}
task vanillaTest {
  description 'Runs the vanilla integration tests.'
  group = 'Verification'
  check.dependsOn it
  shouldRunAfter test
}

(6..8).each { jdk ->
  def sourceSet = sourceSets.create("vanilla${jdk}") {
    java {
      srcDir file('src/it/vanilla/src/main/java')
      compileClasspath += shadowJar.outputs.files
    }
  }
  def testSourceSet = sourceSets.create("vanilla${jdk}Test") {
    java {
      srcDir file('src/it/vanilla/src/test/java')
      compileClasspath += sourceSet.output
      runtimeClasspath += sourceSet.output
    }
  }

  tasks.getByName("compileVanilla${jdk}Java") {
    sourceCompatibility = "1.$jdk"
    targetCompatibility = "1.$jdk"
  }
  tasks.getByName("compileVanilla${jdk}TestJava") {
    sourceCompatibility = "1.$jdk"
    targetCompatibility = "1.$jdk"
  }

  def compile = configurations["vanilla${jdk}Compile"]
  def runtime = configurations["vanilla${jdk}Runtime"]
  def testCompile = configurations["vanilla${jdk}TestCompile"]
  def testRuntime = configurations["vanilla${jdk}TestRuntime"]
  compile.extendsFrom configurations['vanillaCompile']
  testCompile.extendsFrom configurations['vanillaTestCompile']
  testCompile.extendsFrom compile
  testRuntime.extendsFrom runtime

  def test = task("vanilla${jdk}Test", type: Test) {
    vanillaTest.dependsOn it
    testClassesDir = sourceSets["vanilla${jdk}Test"].output.classesDir
    classpath = sourceSets["vanilla${jdk}Test"].runtimeClasspath
    reports {
      html {
        destination "$reportsDir/vanilla${jdk}"
      }
    }
  }
}
